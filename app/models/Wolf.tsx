'use client';

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: alice.duarte13 (https://sketchfab.com/liiceduarte)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/magic-wolf-2b183ca4a3984c1385856ca864c7508c
Title: Magic Wolf
*/

import { type FC, useLayoutEffect, useRef } from 'react';
import type { Materials, Nodes, WolfProps } from '@/app/types/modelTypes';
import type { AnimationAction, Group, Mesh } from 'three';
import type { GLTF } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { useGLTF, useAnimations } from '@react-three/drei';

const Wolf: FC<WolfProps> = ({ currentAnimation, ...props }) => {
  const group = useRef<Group>(null);
  const {
    nodes,
    materials,
    animations,
  }: { nodes: Nodes; materials: Materials; animations: any[] } = useGLTF(
    'https://res.cloudinary.com/dhrtde6px/image/upload/v1713042249/3d/wolf_idimz7.glb'
  ) as unknown as GLTF & { nodes: Nodes; materials: Materials; animations: any[] };

  const { actions } = useAnimations(animations, group);

  useLayoutEffect(() => {
    Object.values(actions).forEach((action: AnimationAction | null) => action?.stop());

    if (actions[currentAnimation]) {
      actions[currentAnimation]?.play();
    }
  }, [actions, currentAnimation]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name='Sketchfab_Scene'>
        <group name='Sketchfab_model' rotation={[-Math.PI / 2, 0, 0]}>
          <group
            name='453a7c815a8f40ea9bd92e6f9063a6b3fbx'
            rotation={[Math.PI / 2, 0, 0]}>
            <group name='Object_2'>
              <group name='RootNode'>
                <group
                  name='magic_wolf'
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={[0.5, 0.5, 0.5]}>
                  <group name='Object_5'>
                    <primitive object={nodes._rootJoint} />
                    <skinnedMesh
                      name='Object_71'
                      geometry={nodes.Object_71.geometry}
                      material={materials['mat_test.001']}
                      skeleton={(nodes.Object_71 as any).skeleton}
                    />
                    <skinnedMesh
                      name='Object_73'
                      geometry={nodes.Object_73.geometry}
                      material={materials.material}
                      skeleton={(nodes.Object_71 as any).skeleton}
                    />
                    <skinnedMesh
                      name='Object_75'
                      geometry={nodes.Object_75.geometry}
                      material={materials['mat_test.001']}
                      skeleton={(nodes.Object_75 as any).skeleton}
                    />
                    <skinnedMesh
                      name='Object_77'
                      geometry={nodes.Object_77.geometry}
                      material={materials['mat_test.001']}
                      skeleton={(nodes.Object_77 as any).skeleton}
                    />
                    <skinnedMesh
                      name='Object_79'
                      geometry={nodes.Object_79.geometry}
                      material={materials['mat_test.001']}
                      skeleton={(nodes.Object_79 as any).skeleton}
                    />
                    <skinnedMesh
                      name='Object_81'
                      geometry={nodes.Object_81.geometry}
                      material={materials['mat_test.001']}
                      skeleton={(nodes.Object_81 as any).skeleton}
                    />
                    <skinnedMesh
                      name='Object_83'
                      geometry={nodes.Object_83.geometry}
                      material={materials['mat_test.001']}
                      skeleton={(nodes.Object_83 as any).skeleton}
                    />
                    <skinnedMesh
                      name='Object_85'
                      geometry={nodes.Object_85.geometry}
                      material={materials['mat_test.002']}
                      skeleton={(nodes.Object_85 as any).skeleton}
                    />
                    <group name='Object_70' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                    <group name='Object_72' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                    <group name='Object_74' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                    <group name='Object_76' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                    <group name='Object_78' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                    <group name='Object_80' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                    <group name='Object_82' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                    <group name='Object_84' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                  </group>
                </group>
                <group name='Gum' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                <group name='Tongue' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                <group name='Canines' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                <group name='Teeth' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                <group name='Front_Teeth' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                <group name='Eyes' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                <group name='Claws' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
                <group name='Body' rotation={[-Math.PI / 2, 0, 0]} scale={100} />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
};

export default Wolf;
